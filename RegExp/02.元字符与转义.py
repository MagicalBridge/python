# Author:Louis Chu
import re

'''
在上面的例子中 字符组中的横线 - 并不能匹配横线字符
而是用来表示范围 这类字符叫做元字符 字符组开头方括号[]
之前出现的^ $ 都算是元字符 在匹配中 他们有着特殊的意义 但是
有时候并不需要这些特殊的意义只需要表示普通的额字符
比如  我就想表示横线的字符 - 这个时候就需要进行特殊的处理
'''
'''
先来看看字符组中的-  如果它紧邻着字符组红的开头[ 那么它就是普通的字符 其他情况下都是元字符而对于其他的
元字符取消特殊含义的做法都是转义 也就是在正则表达式中的
元字符之前加上反斜线字符 ‘\’
如果要在字符组内使用 横线- 最好的做法就是 将它排列在字符组的e最开头 [-09] 就是包含三个字符 - 0 9 [0-9] 是包含0-9这10
个字符的字符组 [-0-9] 表示的是 11个字符 其中包括-
'''
# 作为普通的字符
print(re.search("^[-09]$","3") !=None)#False
print(re.search("^[-09]$","-") !=None)#True

# 作为元字符
print(re.search("^[0-9]$","3") !=None)#True
print(re.search("^[0-9]$","-") !=None)#False

# 转义之后作为普通的字符
print(re.search("^[0\\-9]$","3") !=None)#False
print(re.search("^[0\\-9]$","-") !=None)#True

'''
仔细的观察可以发现 这里面代码写的是 两个反斜杠 这是为什么呢
因为在这段的程序里 正则表达式是以字符串的形式提供的 而字符串
本身也有关于转义的 正则表达式[0\-9]包含6个字符 
在字符串中要想表达着六个字符需要使用7个字符 \ 需要进行转义成
两个斜杠 因为处理字符串时候反斜杠和之后的字符会被认为是转序列

这个问题确实有点麻烦  正则表达式是用来处理字符串的 但是它又不完全等于字符串 正则表达式中的每一个反斜线字符在正则表达式中需要转换成两个斜杠 

不过python 中提供了原生的字符串 它非常适合用于正则表达式 正则表达式是怎样原生字符串就是怎样完全不会去考虑正则表达式之外的转义（只有双引号是例外 原生字符串内的双引号字符必须转义才行）原生字符串的形式是r"string"

'''
#原生字符串和字符串等价
print(r"^[0\-9]$" == "^[0\\-9]$") #true
#原生字符串的转义要简单许多
print(re.search(r"^[0\-9]$","3") !=None) #false
print(re.search(r"^[0\-9]$","-") !=None)#True


'''
原生字符串清晰易懂 省去了繁琐的转义 所以从现在
开始全部使用原生的字符串来实例正则表达式
'''


'''
继续看转义  如果希望在字符组中列出闭方括号] j就必须在之前添加转义否则正则表达式就会与最近的[匹配

'''
# 没有转义]
print(re.search(r"^[012]345]$","2345")!=None) #true
print(re.search(r"^[012]345]$","5")!=None) #False
print(re.search(r"^[012]345]$","]")!=None) #False

#转义的
print(re.search(r"^[012\]345]$","2345")!=None) #false
print(re.search(r"^[012\]345]$","5")!=None) #true
print(re.search(r"^[012\]345]$","]")!=None) #true



