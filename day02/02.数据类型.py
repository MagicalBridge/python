# Author:Louis Chu

# 1、数字

# 2 是一个整数的例子。
# 长整数 不过是大一些的整数。
# 3.23和52.3E-4是浮点数的例子。E标记表示10的幂。在这里，52.3E-4表示52.3 * 10-4。
# (-5+4j)和(2.3-4.6j)是复数的例子，其中-5,4为实数，j为虚数，数学中表示复数是什么？。

# int（整型）

# 在32位机器上，整数的位数为32位，取值范围为-2**31～2**31-1，即-2147483648～2147483647
# 　　在64位系统上，整数的位数为64位，取值范围为-2**63～2**63-1，即-9223372036854775808～9223372036854775807
# long（长整型）
# 　跟C语言不同，Python的长整数没有指定位宽，即：Python没有限制长整数数值的大小，但实际上由于机器内存有限，我们使用的长整数数值不可能无限大。
# 　　注意，自从Python2.2起，如果整数发生溢出，Python会自动将整数数据转换为长整数，所以如今在长整数数据后面不加字母L也不会导致严重后果了。


# float（浮点型）
# 　浮点数用来处理实数，即带有小数的数字。类似于C语言中的double类型，占8个字节（64位），其中52位表示底，11位表示指数，剩下的一位表示符号。
# complex（复数）
# 　　复数由实数部分和虚数部分组成，一般形式为x＋yj，其中的x是复数的实数部分，y是复数的虚数部分，这里的x和y都是实数。
# 注：Python中存在小数字池：-5 ～ 257

# 2、布尔值
# 　　真或假
# 　　1 或 0
# 3、字符串

# 三元运算:
# result = 值1 if 条件 else 值2
# 如果条件为真: result = 值1
# 如果条件为假: result = 值2


# python3 的bytes/str之别:

# python3 中最重要的新特性大概是对于文本和二进制
# 数据作了更为清晰的区别，文本总是Unicode，由str
# 类型表示，二进制数据则是又bytes类型表示,python3
# 不会以任意的隐式的方式混用str和bytes，正式这种使得两者
# 区分的特别清晰，你不能拼接字符串和字节包，也无法在字节包
# 里面搜索字符串（反之亦然），也不能将字符串传入参数为字节包函数
# （反之亦然）这是一件好事。


# str 和 bytes 数据类型的转换;
# msg = "我和你"
# print(msg.encode(encoding="utf-8"))  # b'\xe6\x88\x91\xe5\x92\x8c\xe4\xbd\xa0'
#
# # 先encode 再decode
# print(msg.encode(encoding="utf-8").decode(encoding="utf-8")) # 我和你
