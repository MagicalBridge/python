# 1.定义:
#   模块:  从逻辑上阻止python代码
#          本质就是.py结尾的python文件
#          实现一个功能;
#   包：本质上就是一个目录,(必须带有一个__init__.py)的文件
#       是用来在逻辑上组织模块的;
# 2.导入方法:
#     导入多个模块需要逗号分隔
#   import module_louis,
#   import module_louis_name
# 3.导入模块一个模块中的所有的方法
#
#   from module_louis import m1.m2,m3;
#
#   from module_louis import *建议使用这种方式进行
#     因为这种方式的导入相当于将导入的模块文件全部复制到当前的
#     文件，如果此时我在当前的文件同样的定义一个相同的名称的
#     方法那么后面的定义的方法会覆盖前面的方法
#
#   from module_louis import logger as logger_louis
#     上面的这种引用额方法相当于将源文件中的logger 起了一个名字
#     我们调用的时候应该调用别名以区分和现在这个文件的方法
#
# 4.import 的本质是什么
#       本质就是将引入的模块 解释了一遍将这个文件解释完的
#       东西赋值给一个变量 我们调用的是候使用的模块的名称.方法
#       和.变量的行为
#   from import 本质
#      只是将某一段代码复制到当前的文件然后执行
#      此时如果想要调用直接引用就好了;
#   使用pycharm新建一个package文件,这个包本质上是一个文件夹
#   这个文件夹的和普通的区别的是里面有一个__init__.py 文件
#   导入包的本质就是执行init.py 文件;
#
# 5.导入模块的时候,调用的sys.path 系统路径
#   这个路径的 sys.path返回的是一个列表
#   我们为了找到这个import文件的时候实际上
#   是在找这个路径,我们只需要将我们想要导入的模块的
#   绝对的路径放在sys.path 里面提供搜索就好了;
#   导入包和模块的区别是 导入模块的内部的代码,
#   导入的包的本质是执行的是__init__.py文件;
#
# 6.这就引出了下面的话题 如果我在包下面和__init__.py
#   同级目录下面创建一个模块  我想在外面调用这个模块
#   应该如何操作;对于_init_文件同级的模块  我们需要进行
#   在_init_ 内部进行导入模块的操作,然后相当于将模块
#   代码拷贝到了__init__文件里面进行执行,然后在外面调用
#   _init_文件也就是执行了相关的包内部的代码;
#   在__init__ 内部引入包的操作是   from .import tsst1
#   这样的语法  上面的这个 form .  是相对路径  这个相对指的是
#   相对于init 文件而言的;
#
# 7.导入优化:
#   如果在一个文件调用一个模块中的方法
#   这个文件中的很多的函数 都需要调用这个
#   模块的方法 如果使用 import module_test
#
#   每次调用都使用module_test.方法名称
#   这样带来的影响就是每一次查找都在消耗性能
#   取而代之的是使用 from module_test import ……
#   这样就能够提高性能;
# 8.python中有三种模块
#   1.标准库
#   2.开源模块
#   3.自定义模块
#
#
#
#
#
#
#
#
#
#
#